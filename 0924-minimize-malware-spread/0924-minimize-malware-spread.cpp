class Solution {
public:
    map<int,int> store;
    void dfs(int parent, vector<vector<int>>& graph, vector<int> &size,vector<int> &color,vector<int> &vis,int source){
        int n = graph.size();
        vis[parent]=1;
        size[source]++;
        for(int child=0;child<n;child++){
            if(child!=parent and vis[child]==0 and graph[parent][child]==1){
                if(store.find(child)!=store.end()){
                    color[source]=1;
                    color[child]=1;
                }
                dfs(child,graph,size,color,vis,source);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        store.clear();
        for(auto sd: initial)store[sd]=1;
        vector<int> size(n,0),color(n,0),vis(n,0);
        for(auto s : store){
            if(vis[s.first]==0){
                 dfs(s.first,graph,size,color,vis,s.first);
            }
        }
        
        // for(int i=0;i<n;i++){
        //     cout<<size[i]<<" ";
        // }
        // cout<<"\n";
        int mx=0,val=0;
        for(auto sd:store){
            // cout<<color[sd.first]<<" "<<sd.first<<"\n";
            if(color[sd.first]==0){
                if(size[sd.first]>mx)mx=size[sd.first],val=sd.first;
            }
        }
        if(mx!=0)return val;
        // min node because all are connected.
        for(auto sd:store){
            return sd.first;
        }
        return 0;
    }
};